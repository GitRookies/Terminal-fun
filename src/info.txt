- Each cooperative processes will contain these data structure:

1. Address of the next and previous co-worker process of this process.
   std::unordered_set<uint8_t id, uint32_t port>;

* The process with id of 0 will be the 1st process to start the scroll and will pass on to consecutive id programs.
* The process with id of 0 will obviously have no previous co-worker process. Of in case, in the future versions,
  if we design the system in a circular manner then the 1st process will have the last process as its previous co-worker
  process.

- Command-line arguments:

  $ term-fun -t <N_processes> -m <my_port_no> [-n <next_port_no> -p <prev_port_no>]
  
  * <N_processes> is the no of cooperative process that will be involved including itself.
  * <my_port_no> is the current process's port no.
  * <next_port_no> are provided for the nodes {1...N-1}.
  * <prev_port_no> are provided for the nodes {2...N}.
  * Both <next_port_no> and <prev_port_no> are provided for nodes {2...N-1}.
  * Example diagram of cooperating processes:

    P1 <--> P2 <--> P3 <--> P4 <--> ... <--> P(N-1) <--> P(N)

    As you can see P1 has no <prev_port_no> and P(N) has no <next_port_no>.

  * If no arguments are provided then the process will just show a simple scroll and exit.

